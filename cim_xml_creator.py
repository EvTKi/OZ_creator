# cim_xml_creator
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CIM/XML-—Ñ–∞–π–ª–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç lxml –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è XML –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å CIM-—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ö–µ–º–æ–π Monitel.
"""

import logging
from datetime import datetime
from lxml import etree
from config import (
    NSMAP,
    MODEL_CREATED_FORMAT,
    DEFAULT_STORAGE_DEPTH,
    DEFAULT_ORDER,
    DEBUG_PARENT_UID,
    generate_uid,
)


def create_cim_xml(category_types, parent_obj_uid=None):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ CIM/XML –≤ —Ñ–æ—Ä–º–∞—Ç–µ RDF.

    Args:
        category_types (list[dict]): –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            [
              {
                'name': '–¢–∏–ø 1',
                'categories': [
                  {
                    'name': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è A',
                    'storageDepth': 1095,
                    'templates': ['—à–∞–±–ª–æ–Ω1', '—à–∞–±–ª–æ–Ω2']
                  }
                ]
              }
            ]
        parent_obj_uid (str, optional): UID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ï—Å–ª–∏ None ‚Äî –±–µ—Ä—ë—Ç—Å—è –∏–∑ config.

    Returns:
        str: XML-—Å—Ç—Ä–æ–∫–∞ —Å –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–µ–π –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏.

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è XML.
    """
    try:
        logging.info("–ó–∞–ø—É—Å–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è CIM-XML‚Ä¶")
        parent_obj_uid = parent_obj_uid or DEBUG_PARENT_UID

        # –ö–æ—Ä–µ–Ω—å RDF
        root = etree.Element('{%s}RDF' % NSMAP['rdf'], nsmap=NSMAP)

        # FullModel
        fm_uid = generate_uid()
        fm = etree.SubElement(
            root,
            '{%s}FullModel' % NSMAP['md'],
            attrib={"{%s}about" % NSMAP['rdf']: f"#_{fm_uid}"}
        )
        created = datetime.utcnow().strftime(MODEL_CREATED_FORMAT)
        etree.SubElement(fm, '{%s}Model.created' % NSMAP['md']).text = created
        etree.SubElement(fm, '{%s}Model.version' %
                         NSMAP['md']).text = "ver:sample;"
        etree.SubElement(fm, '{%s}Model.name' % NSMAP['me']).text = "CIM16"

        count_types = 0
        count_cats = 0
        count_templates = 0

        for idx, ct in enumerate(category_types):
            ct_name = ct.get('name', 'Unnamed Type').strip()
            if not ct_name or ct_name.lower() == 'nan':
                logging.warning("–ü—Ä–æ–ø—É—â–µ–Ω —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º")
                continue

            ct_uid = generate_uid()
            ct_elem = etree.SubElement(
                root,
                '{%s}DjCategoryType' % NSMAP['me'],
                attrib={"{%s}about" % NSMAP['rdf']: f"#_{ct_uid}"}
            )
            etree.SubElement(
                ct_elem,
                '{%s}IdentifiedObject.name' % NSMAP['cim']
            ).text = ct_name
            etree.SubElement(
                ct_elem,
                '{%s}IdentifiedObject.ParentObject' % NSMAP['me'],
                attrib={'{%s}resource' % NSMAP['rdf']: f"#_{parent_obj_uid}"}
            )
            etree.SubElement(
                ct_elem,
                '{%s}DjCategoryType.order' % NSMAP['me']
            ).text = str(idx)  # –∏–ª–∏ DEFAULT_ORDER

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–¥–∏–Ω —Ä–∞–∑
            categories = ct.get('categories', [])
            cat_uids = [generate_uid() for _ in categories]

            # –°–≤—è–∑—å: DjCategoryType ‚Üí DjCategory (—á–µ—Ä–µ–∑ Categories)
            for uid in cat_uids:
                etree.SubElement(
                    ct_elem,
                    '{%s}DjCategoryType.Categories' % NSMAP['me'],
                    attrib={'{%s}resource' % NSMAP['rdf']: f"#_{uid}"}
                )

            # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã DjCategory
            for idx, cat in enumerate(categories):
                cat_name = cat.get('name', 'Unnamed Category').strip()
                if not cat_name or cat_name.lower() == 'nan':
                    logging.warning(
                        f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ–∑ –∏–º–µ–Ω–∏ –≤ —Ç–∏–ø–µ '{ct_name}'")
                    continue

                cat_uid = cat_uids[idx]
                cat_elem = etree.SubElement(
                    root,
                    '{%s}DjCategory' % NSMAP['me'],
                    attrib={"{%s}about" % NSMAP['rdf']: f"#_{cat_uid}"}
                )
                etree.SubElement(
                    cat_elem,
                    '{%s}IdentifiedObject.name' % NSMAP['cim']
                ).text = cat_name
                etree.SubElement(
                    cat_elem,
                    '{%s}IdentifiedObject.ParentObject' % NSMAP['me'],
                    attrib={'{%s}resource' % NSMAP['rdf']: f"#_{ct_uid}"}
                )
                etree.SubElement(
                    cat_elem,
                    '{%s}DjCategory.order' % NSMAP['me']
                ).text = str(idx)  # –∏–ª–∏ DEFAULT_ORDER
                etree.SubElement(
                    cat_elem,
                    '{%s}DjCategory.actionTimeWithinShift' % NSMAP['me']
                ).text = "false"
                etree.SubElement(
                    cat_elem,
                    '{%s}DjCategory.messageRequired' % NSMAP['me']
                ).text = "false"
                etree.SubElement(
                    cat_elem,
                    '{%s}DjCategory.reportForHigherOperationalStaff' % NSMAP['me']
                ).text = "false"
                etree.SubElement(
                    cat_elem,
                    '{%s}DjCategory.shiftPersonRestricted' % NSMAP['me']
                ).text = "false"
                etree.SubElement(
                    cat_elem,
                    '{%s}DjCategory.storageDepth' % NSMAP['me']
                ).text = str(cat.get('storageDepth', DEFAULT_STORAGE_DEPTH))

                # –°–≤—è–∑—å: DjCategory ‚Üí DjCategoryType
                etree.SubElement(
                    cat_elem,
                    '{%s}DjCategory.CategoryType' % NSMAP['me'],
                    attrib={'{%s}resource' % NSMAP['rdf']: f"#_{ct_uid}"}
                )

                # –®–∞–±–ª–æ–Ω—ã
                templates = cat.get('templates', [])
                for idx, tmpl_text in enumerate(templates):
                    if not tmpl_text or str(tmpl_text).lower() in ('nan', 'none', ''):
                        continue

                    tmpl_uid = generate_uid()
                    # –°–≤—è–∑—å: DjCategory ‚Üí DjRecordTemplate
                    etree.SubElement(
                        cat_elem,
                        '{%s}DjCategory.Templates' % NSMAP['me'],
                        attrib={'{%s}resource' % NSMAP['rdf']: f"#_{tmpl_uid}"}
                    )
                    tmpl_elem = etree.SubElement(
                        root,
                        '{%s}DjRecordTemplate' % NSMAP['me'],
                        attrib={"{%s}about" % NSMAP['rdf']: f"#_{tmpl_uid}"}
                    )
                    etree.SubElement(
                        tmpl_elem,
                        '{%s}DjRecordTemplate.order' % NSMAP['me']
                    ).text = str(idx)  # –∏–ª–∏ DEFAULT_ORDER
                    etree.SubElement(
                        tmpl_elem,
                        '{%s}DjRecordTemplate.text' % NSMAP['me']
                    ).text = str(tmpl_text)
                    etree.SubElement(
                        tmpl_elem,
                        '{%s}DjRecordTemplate.Category' % NSMAP['me'],
                        attrib={'{%s}resource' % NSMAP['rdf']: f"#_{cat_uid}"}
                    )
                    count_templates += 1

                count_cats += 1
            count_types += 1

        logging.info(
            f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {count_types} —Ç–∏–ø–æ–≤, {count_cats} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {count_templates} —à–∞–±–ª–æ–Ω–æ–≤"
        )
        logging.info("CIM-XML –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

        return etree.tostring(
            root,
            encoding='utf-8',
            pretty_print=True,
            xml_declaration=True
        ).decode('utf-8')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ CIM-XML: {e}")
        raise


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# üß™ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
if __name__ == "__main__":
    import sys
    from xlsx_parser import build_structure_from_excel
    from config import *
    import os

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s [%(levelname)s] %(message)s',
        handlers=[
            logging.FileHandler("cim_xml_debug.log", encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

    try:
        from config import DEBUG_PARENT_UID
        filename = DEBUG_FILE_NAME
        base = os.path.splitext(os.path.basename(filename))[0]

        structure = build_structure_from_excel(filename)
        xml_str = create_cim_xml(structure, parent_obj_uid=DEBUG_PARENT_UID)
        with open(f"{base}.xml", "w", encoding="utf-8") as f:
            f.write(xml_str)
        logging.info("XML —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ output.xml")
        print("‚úÖ XML —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ output.xml")
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ __main__: {err}")
        print(f"[ERROR] {err}")
        sys.exit(1)
